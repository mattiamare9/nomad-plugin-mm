#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from nomad.datamodel.metainfo.basesections import ProcessStep
from nomad.datamodel.metainfo.basesections import Process
from nomad.datamodel.data import EntryData
from typing import (
    TYPE_CHECKING,
)
from nomad.metainfo import (
    Package,
    Quantity,
    SubSection,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)
if TYPE_CHECKING:
    from nomad.datamodel.datamodel import (
        EntryArchive,
    )
    from structlog.stdlib import (
        BoundLogger,
    )

m_package = Package(name='Run example')


class Run(Process, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    run_name = Quantity(
        type=str,
        description='Name of the run',
        default="",
    )
    project = Quantity(
        type=str,
        description='Project of the run',
        default="",
    )
    workpackage = Quantity(
        type=str,
        description='some description',
        default="",
    )
    run_description = Quantity(
        type=str,
        description='Description of the run',
        default="",
    )
    author = Quantity(
        type=str,
        description='Author of the run',
        default="",
    )
    cost_model = Quantity(
        type=str,
        description='some Cost model description',
        default="",
    )
    start_date = Quantity(
        type=str,
        description='Start date of the run',
        default="",
    )
    generated_on = Quantity(
        type=str,
        description='Date of the generation of the report',
        default="",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Run` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Header(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    step_number = Quantity(
        type=int,
        description='Step number',
        default=0,
    )
    step_type = Quantity(
        type=str,
        description='Type of the step',
        default="",
    )
    description = Quantity(
        type=str,
        description='Description of the step',
        default="",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `Header` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class GeneralParameters(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    description = Quantity(
        type=str,
        description='Description of the step',
        default="",
    )
    operator = Quantity(
        type=str,
        description='Operator of the step',
        default="",
    )
    wafers = Quantity(
        type=str,
        description='Number of wafers',
        default="",
    )
    planned_date = Quantity(
        type=str,
        description='Planned date of the step',
        default="",
    )
    done = Quantity(
        type=bool,
        description='Done?',
    )
    run_name = Quantity(
        type=str,
        description='Name of the run the step belongs to',
        default="",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `GeneralParameters` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class StepGeneric(ProcessStep, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    header = SubSection(
        section_def=Header,
    )
    general_parameters = SubSection(
        section_def=GeneralParameters,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `StepGeneric` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


m_package.__init_metainfo__()
